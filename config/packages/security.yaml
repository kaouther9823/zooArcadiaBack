security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\Utilisateur
                property: username
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern:  ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            pattern: ^/api
            stateless: true
            jwt: ~
        main:
            lazy: true
            provider: app_user_provider
            access_denied_url: /403
            stateless: true
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used

    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS  }
        - { path: ^/api/logout, roles: IS_AUTHENTICATED_FULLY }
        # access libre
        - { path: ^/api/services, roles: [PUBLIC_ACCESS],  methods: [GET]}
        - { path: ^/api/habitats, methods: [GET], roles: [PUBLIC_ACCESS]}
        - { path: ^/api/horraires, methods: [GET], roles: [PUBLIC_ACCESS]}
        - { path: ^/api/animaux, methods: [GET], roles: [PUBLIC_ACCESS]}
        - { path: ^/api/avis, methods: [GET, POST], roles: [PUBLIC_ACCESS]}
        - { path: ^/api/etats, methods: [GET], roles: [PUBLIC_ACCESS]}
        - { path: ^/api/nouritures, methods: [GET], roles: [PUBLIC_ACCESS]}
        - { path: ^/api/races, methods: [GET], roles: [PUBLIC_ACCESS]}
        - { path: ^/api/contact, methods: [POST], roles: [PUBLIC_ACCESS]}
            # /api/services
        - { path: ^/api/services, roles: [ROLE_EMPLOYE, ROLE_ADMIN] }

            # /api/habitats
        - { path: ^/api/habitats, roles: ROLE_ADMIN }

            # /api/animaux
        - { path: ^/api/animaux, roles: ROLE_ADMIN }
        - { path: ^/api/animaux, roles: ROLE_EMPLOYE }
        - { path: ^/api/animaux, roles: ROLE_VETERINAIRE, methods: [ GET, PUT ] }

            # /api/avis
        - { path: ^/api/avis, roles: ROLE_ADMIN, methods: [ GET ] }
        - { path: ^/api/avis, roles: ROLE_EMPLOYE }

        # /api/rapports/employes
        - { path: ^/api/rapports/employes, roles: [ROLE_ADMIN,ROLE_VETERINAIRE, ROLE_EMPLOYE] , methods: [ GET ] }
        - { path: ^/api/rapports/employes, roles: ROLE_EMPLOYE }

        # /api/rapports/veterinaires
        - { path: ^/api/rapports/veterinaires, roles: ROLE_VETERINAIRE }
        - { path: ^/api/rapports/veterinaires, roles: ROLE_ADMIN, methods: [ GET ] }

        # /api/commentaires
        - { path: ^/api/commentaires, roles: ROLE_VETERINAIRE }
        - { path: ^/api/commentaires, roles: ROLE_ADMIN, methods: [ GET ] }


        # /api/users
        - { path: ^/api/users, roles: ROLE_ADMIN }

        # /api/contact
        - { path: ^/api/contact, methods: [ POST ] }
        # /api/consultations
        - { path: ^/api/consultations, roles: ROLE_ADMIN, methods: [ GET ] }
        # /api/horraires
        - { path: ^/api/horraires, roles: ROLE_ADMIN, methods: [ GET, PUT ] }
        - { path: ^/api/horraires, roles: ROLE_EMPLOYE, methods: [ GET ] }
        - { path: ^/api/horraires, roles: ROLE_VETERINAIRE, methods: [ GET ] }

            # /api/login
        - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }

            # /api/logout
        - { path: ^/api/logout, roles: IS_AUTHENTICATED_FULLY }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
